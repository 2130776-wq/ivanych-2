from flask import Flask, request, jsonify
from flask_cors import CORS
import json, re, os
from typing import List, Dict, Any

app = Flask(__name__)
CORS(app)  # –≤–∞–∂–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –Ω–µ –ª–æ–≤–∏–ª CORS

DATA: List[Dict[str, Any]] = []

def load_data():
    global DATA
    path = os.path.join(os.path.dirname(__file__), "1.json")
    with open(path, "r", encoding="utf-8") as f:
        raw = json.load(f)

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π, –¥–∞–∂–µ –µ—Å–ª–∏ –∫–æ—Ä–µ–Ω—å ‚Äî dict
    if isinstance(raw, list):
        DATA = raw
    elif isinstance(raw, dict):
        # –µ—Å–ª–∏ –∫–æ—Ä–µ–Ω—å-—Å–ª–æ–≤–∞—Ä—å, –±–µ—Ä—ë–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–∏–ª–∏ –∑–∞–≤–µ—Ä–Ω—ë–º –≤ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç)
        # —á–∞—â–µ –≤—Å–µ–≥–æ –Ω—É–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å–∏–¥—è—Ç –≤ –∫–∞–∫–æ–º-—Ç–æ –∫–ª—é—á–µ; –±–µ—Ä—ë–º –≤—Å–µ values
        vals = list(raw.values())
        flat: List[Dict[str, Any]] = []
        for v in vals:
            if isinstance(v, list):
                flat.extend(v)
            elif isinstance(v, dict):
                flat.append(v)
        DATA = flat if flat else [raw]
    else:
        DATA = []

def norm(s: str) -> str:
    if not isinstance(s, str):
        s = str(s)
    s = s.strip()
    # –∑–∞–º–µ–Ω—è–µ–º –ª—é–±—ã–µ —Ç–∏—Ä–µ/–¥–ª–∏–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –Ω–∞ –æ–±—ã—á–Ω—ã–π
    s = s.replace("‚Äî", "-").replace("‚Äì", "-").replace("‚Äë", "-")
    # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –¥–µ—Ñ–∏—Å–æ–≤ –∏ –≤–æ–æ–±—â–µ
    s = re.sub(r"\s+", "", s)
    return s.lower()

def record_text(rec: Dict[str, Any]) -> str:
    """–°–∫–ª–µ–π–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞–ø–∏—Å–∏, –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–µ–π."""
    parts: List[str] = []
    def collect(v):
        if isinstance(v, dict):
            for vv in v.values():
                collect(vv)
        elif isinstance(v, list):
            for vv in v:
                collect(vv)
        else:
            if isinstance(v, str):
                parts.append(v)
            else:
                # —á–∏—Å–ª–∞ —Ç–æ–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º
                parts.append(str(v))
    collect(rec)
    return " | ".join(parts)

def find_by_article(query: str) -> Dict[str, Any] | None:
    q = norm(query)
    if not q:
        return None

    # –ò—â–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ –ø–æ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞
    candidate_keys = {"article", "art", "sku", "–∫–æ–¥", "–∞—Ä—Ç–∏–∫—É–ª"}
    for rec in DATA:
        for k, v in rec.items():
            if k.lower() in candidate_keys:
                if norm(v) == q:
                    return rec

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –∏—â–µ–º –≤ —Å–∫–ª–µ–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∏
    for rec in DATA:
        txt = record_text(rec)
        if q in norm(txt):
            return rec

    return None

@app.route("/health", methods=["GET"])
def health():
    return jsonify({"ok": True, "records": len(DATA)})

@app.route("/chat", methods=["POST"])
def chat():
    try:
        payload = request.get_json(silent=True) or {}
        message = (payload.get("message") or "").strip()
        if not message:
            return jsonify({"reply": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å."})

        app.logger.info(f"[CHAT] raw='{message}' norm='{norm(message)}' records={len(DATA)}")
        rec = find_by_article(message)
        if not rec:
            return jsonify({"reply": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ üôÅ"})

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        # –ü—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å —Å–∞–º—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è, –∏–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∂–µ–º –∑–∞–ø–∏—Å—å —Ü–µ–ª–∏–∫–æ–º
        name = rec.get("name") or rec.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") or rec.get("title")
        article = rec.get("article") or rec.get("–∞—Ä—Ç–∏–∫—É–ª") or rec.get("sku")
        price = rec.get("price") or rec.get("—Ü–µ–Ω–∞")
        line = []
        if name:    line.append(f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {name}")
        if article: line.append(f"–ê—Ä—Ç–∏–∫—É–ª: {article}")
        if price:   line.append(f"–¶–µ–Ω–∞: {price}")
        reply = "\n".join(line) if line else json.dumps(rec, ensure_ascii=False)
        return jsonify({"reply": reply})

    except Exception as e:
        app.logger.exception("Chat error")
        return jsonify({"reply": f"–û—à–∏–±–∫–∞: {e}"}), 500

if __name__ == "__main__":
    # –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
    load_data()
    app.run(host="0.0.0.0", port=5000)
else:
    # –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ Render
    load_data()
