# app.py
import os
import re
import json
from typing import Any, Dict, List, Optional

from flask import Flask, request, jsonify
from flask_cors import CORS

# ==== OpenAI (–Ω–æ–≤—ã–π SDK) ====
# –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY
try:
    from openai import OpenAI
    _openai_available = True
except Exception:
    _openai_available = False

# ================== –ë–†–ï–ù–î/–ì–û–õ–û–° ==================
COMPANY_NAME   = "SALPI"
CONTACT_EMAIL  = "info@salpi.ru"

SYSTEM_PROMPT = f"""
–¢—ã ‚Äî –ò–≤–∞–Ω—ã—á, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ {COMPANY_NAME}.
–ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –æ—Ç –ª–∏—Ü–∞ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏: ¬´–º—ã¬ª, ¬´—É –Ω–∞—Å¬ª, ¬´–Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è¬ª.
–ó–∞–ø—Ä–µ—â–µ–Ω–æ:
- —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º, –º–∞–≥–∞–∑–∏–Ω–∞–º, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º, ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –¥–∏–ª–µ—Ä–∞–º¬ª, ¬´–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é¬ª –∏ —Ç.–ø.;
- –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ¬´–ø–æ–∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ¬ª –∏–ª–∏ ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞¬ª.
–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç ¬´–≥–¥–µ –∫—É–ø–∏—Ç—å/—É –∫–æ–≥–æ —É—Ç–æ—á–Ω–∏—Ç—å/–∫ –∫–æ–º—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è¬ª ‚Äî –æ—Ç–≤–µ—á–∞–π:
¬´–ú—ã –ø–æ–º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ {CONTACT_EMAIL}, –∏ –º—ã –æ—Ñ–æ—Ä–º–∏–º –≤—Å—ë –ø–æ–¥ –∫–ª—é—á.¬ª
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤–Ω–µ –Ω–∞—à–µ–π —Ç–µ–º—ã ‚Äî –º—è–≥–∫–æ –≤–µ—Ä–Ω–∏ –≤ –Ω–∞—à—É —Ç–µ–º–∞—Ç–∏–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ {CONTACT_EMAIL}.
–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã. –ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ –ø–æ—á—Ç–µ.
"""

FORBIDDEN_SUPPLIER_PATTERNS = [
    r"–æ–±—Ä–∞—Ç–∏—Ç[–µ—ë]—Å—å.*(—Å—Ç–æ—Ä–æ–Ω–Ω|–¥—Ä—É–≥–∏–º)\s+–ø–æ—Å—Ç–∞–≤—â–∏–∫",
    r"–æ–±—Ä–∞—Ç–∏—Ç[–µ—ë]—Å—å.*–º–∞–≥–∞–∑–∏[–Ω–Ω]",
    r"—É\s+–ø–æ—Å—Ç–∞–≤—â–∏–∫[–∞–æ—É–µ]",
    r"—É\s+–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª[—è–µ—è]",
    r"–≤\s+—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ?\s+–º–∞–≥–∞–∑–∏–Ω",
    r"–ø–æ–∏—Å–∫–∞—Ç—å\s+–≤\s+–∏–Ω—Ç–µ—Ä–Ω–µ—Ç[–µ–∞—Ö]",
    r"—Å–≤—è–∂–∏—Ç–µ—Å—å\s+—Å\s+–¥–∏–ª–µ—Ä",
    r"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å\s+–∫\s+–ø—Ä–æ–¥–∞–≤—Ü",
]

def enforce_company_voice(text: str) -> str:
    """–ü–æ–¥–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∏ –±–ª–æ–∫–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."""
    # 1) ¬´–º—ã-–≥–æ–ª–æ—Å¬ª
    text = re.sub(r"(?<!\S)—è(?!\S)", "–º—ã", text, flags=re.IGNORECASE)
    text = re.sub(r"(?i)\b–º–æ–π\b", "–Ω–∞—à", text)
    text = re.sub(r"(?i)\b–º–æ—è\b", "–Ω–∞—à–∞", text)
    text = re.sub(r"(?i)\b–º–æ–∏\b", "–Ω–∞—à–∏", text)
    text = re.sub(r"(?i)\b–º–µ–Ω—è\b", "–Ω–∞—Å",  text)

    # 2) –∑–∞–ø—Ä–µ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    if any(re.search(p, text, flags=re.IGNORECASE) for p in FORBIDDEN_SUPPLIER_PATTERNS):
        text = (
            f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. "
            f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ {CONTACT_EMAIL} ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å—á–µ—Ç –∏ –ø—Ä–æ–≤–µ–¥–µ–º –ø–æ—Å—Ç–∞–≤–∫—É."
        )
    return text

# ================== –î–ê–ù–ù–´–ï (1.json) ==================
APP_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_PATH = os.path.join(APP_DIR, "1.json")
DATA: List[Dict[str, Any]] = []

def load_data() -> None:
    global DATA
    try:
        with open(DATA_PATH, "r", encoding="utf-8") as f:
            raw = json.load(f)
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π:
        if isinstance(raw, list):
            DATA = raw
        elif isinstance(raw, dict):
            vals = list(raw.values())
            flat: List[Dict[str, Any]] = []
            for v in vals:
                if isinstance(v, list):
                    flat.extend(v)
                elif isinstance(v, dict):
                    flat.append(v)
            DATA = flat if flat else [raw]
        else:
            DATA = []
    except Exception:
        DATA = []

def norm(s: Any) -> str:
    s = str(s) if s is not None else ""
    s = s.strip()
    s = s.replace("‚Äî", "-").replace("‚Äì", "-").replace("‚Äë", "-")
    s = re.sub(r"\s+", "", s)
    return s.lower()

def record_text(rec: Dict[str, Any]) -> str:
    parts: List[str] = []
    def collect(v: Any):
        if isinstance(v, dict):
            for vv in v.values(): collect(vv)
        elif isinstance(v, list):
            for vv in v: collect(vv)
        else:
            parts.append(str(v))
    collect(rec)
    return " | ".join(parts)

def find_by_article(q: str) -> Optional[Dict[str, Any]]:
    """–ò—â–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–ª—è–º –∞—Ä—Ç–∏–∫—É–ª–∞, –∑–∞—Ç–µ–º –ø–æ —Å–ø–ª—é—â–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –∑–∞–ø–∏—Å–∏."""
    qn = norm(q)
    if not qn:
        return None

    article_keys = {"code", "article", "sku", "–∞—Ä—Ç–∏–∫—É–ª", "–∫–æ–¥"}
    for rec in DATA:
        for k, v in rec.items():
            if k.lower() in article_keys and norm(v) == qn:
                return rec
    for rec in DATA:
        if qn in norm(record_text(rec)):
            return rec
    return None

# ================== –§–ê–°–¢-–†–ï–°–ü–û–ù–°–´ (FAQ/–ø—Ä–∞–≤–∏–ª–∞) ==================
RE_DELIVERY   = re.compile(r"\b(–¥–æ—Å—Ç–∞–≤–∫\w*|–æ—Ç–ø—Ä–∞–≤\w*|–æ—Ç–≥—Ä—É–∑\w*|–≥—Ä—É–∑–∏—Ç–µ)\b", re.IGNORECASE)
RE_AVAILABLE  = re.compile(r"(–µ—Å—Ç—å\s+–≤\s+–Ω–∞–ª–∏—á–∏–∏|–Ω–∞–ª–∏—á–∏–µ|\b–≤\s+–Ω–∞–ª–∏—á–∏–∏\b|\b—Å–µ–π—á–∞—Å\s+–µ—Å—Ç—å\b)", re.IGNORECASE)
RE_MIN_QTY    = re.compile(r"(–º–∏–Ω–∏–º–∞–ª—å–Ω\w+\s+–∫–æ–ª–∏—á–µ—Å—Ç–≤\w+|–º–∏–Ω–∏–º–∞–ª–∫\w+|\b—Å–∫–æ–ª—å–∫–æ\s+–º–∏–Ω–∏–º—É–º\b)", re.IGNORECASE)
RE_DISCOUNT   = re.compile(r"(—Å–∫–∏–¥–∫\w+|–¥–∏—Å–∫–æ–Ω—Ç)", re.IGNORECASE)
RE_COUNTRY    = re.compile(r"(–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤\w+|—Å—Ç—Ä–∞–Ω–∞)", re.IGNORECASE)
RE_CHINA      = re.compile(r"\b–∫–∏—Ç–∞–π\b", re.IGNORECASE)
RE_TUBE       = re.compile(r"(—Ç—Ä—É–±–∫–∞|—à–ª–∞–Ω–≥|—Ä–≤–¥)", re.IGNORECASE)
RE_IDENTITY   = re.compile(r"(—Ç—ã\s*(–∫—Ç–æ|—á–µ–ª–æ–≤–µ–∫|–∂–∏–≤–æ–π)|–∫—Ç–æ\s*—Ç—ã)", re.IGNORECASE)
RE_BUY        = re.compile(r"(–∫—É–ø–∏—Ç—å|–ø—Ä–∏–æ–±—Ä–µ—Å—Ç[—å–∏]|–∑–∞–∫–∞–∑(–∞—Ç—å)?|—Å—á[–µ—ë]—Ç|–æ–ø–ª–∞—Ç–∏—Ç—å)", re.IGNORECASE)

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–±—ã—Ö —Å–ª–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
INSULT_WORDS = [
    "–¥—É—Ä–∞–∫","–¥–µ–±–∏–ª","–∏–¥–∏–æ—Ç","—Ç—É–ø–æ–π","—Ç—É–ø–∏—Ü–∞","–∫—Ä–µ—Ç–∏–Ω","–º—Ä–∞–∑—å","—É—Ä–æ–¥","—Å–≤–æ–ª–æ—á—å"
]

def check_insult(q: str) -> bool:
    return any(w in q.lower() for w in INSULT_WORDS)

# ================== Flask ==================
app = Flask(__name__)
CORS(app)

@app.route("/health", methods=["GET"])
def health():
    return jsonify({"ok": True, "records": len(DATA)})

# –∞—Ä—Ç–∏–∫—É–ª—ã –≤–∏–¥–∞ 100-123, 104-456, 106-003 –∏ —Ç.–ø.
ARTICLE_CODE = re.compile(r"\b(100|104|106|108|250)-\d{3}\b")

def article_reply(rec: Dict[str, Any]) -> str:
    name   = rec.get("name") or rec.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") or rec.get("title")
    code   = rec.get("code") or rec.get("–∞—Ä—Ç–∏–∫—É–ª") or rec.get("article") or rec.get("sku")
    price  = rec.get("price") or rec.get("—Ü–µ–Ω–∞")
    out = []
    if name:  out.append(f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {name}")
    if code:  out.append(f"–ê—Ä—Ç–∏–∫—É–ª: {code}")
    if price: out.append(f"–¶–µ–Ω–∞: {price}")
    return "\n".join(out) if out else json.dumps(rec, ensure_ascii=False)

def maybe_hard_reply(q: str) -> Optional[str]:
    """–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∏ –∫–ª—é—á–∏."""
    # 9) –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ
    if check_insult(q):
        return "–•–º‚Ä¶ —Å–∞–º —Ç–∞–∫–æ–π üôÇ"

    # 1) –î–æ—Å—Ç–∞–≤–∫–∞/–æ—Ç–≥—Ä—É–∑–∫–∞
    if RE_DELIVERY.search(q):
        return ("–î–æ—Å—Ç–∞–≤–∫–∞ –¢–ö ¬´–î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏¬ª: –¥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ –≥–æ—Ä–æ–¥–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, "
                "–¥–∞–ª–µ–µ –∑–∞ –≤–∞—à —Å—á—ë—Ç. –õ–∏–±–æ –°–î–≠–ö.")

    # 2) –ù–∞–ª–∏—á–∏–µ
    if RE_AVAILABLE.search(q):
        return ("–î–∞, –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏. –•–æ—Ç–∏—Ç–µ —Å—á—ë—Ç? –ï—Å–ª–∏ –¥–∞ ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–º–µ—Å—Ç–µ —Å "
                f"–∫–∞—Ä—Ç–æ—á–∫–æ–π –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –Ω–∞ {CONTACT_EMAIL}.")

    # 3) –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if RE_MIN_QTY.search(q):
        return "–í –æ—Å–Ω–æ–≤–Ω–æ–º ‚Äî –∫—Ä–∞—Ç–Ω–æ 10 —à—Ç."

    # 4) –°–∫–∏–¥–∫–∞
    if RE_DISCOUNT.search(q):
        return "–°–∫–∏–¥–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –°–∫–æ–ª—å–∫–æ –≤–∞–º –Ω—É–∂–Ω–æ?"

    # 5) –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    if RE_COUNTRY.search(q):
        return "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ‚Äî –ß–µ—Ö–∏—è, –ì–µ—Ä–º–∞–Ω–∏—è."

    # 6) –ö–∏—Ç–∞–π?
    if RE_CHINA.search(q):
        return "–ö–∏—Ç–∞–π ‚Äî –Ω–µ—Ç."

    # 7) –¢—Ä—É–±–∫–∞/—à–ª–∞–Ω–≥/–†–í–î
    if RE_TUBE.search(q):
        return ("–£ –Ω–∞—Å –µ—Å—Ç—å —Ç—Ä—É–±–∫–∞ 6√ó1,5 –º–º ‚Äî –∫–æ–¥ 100-003-25. "
                "–ò —à–ª–∞–Ω–≥ –≤—ã—Å–æ–∫–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è –¥–æ 800 bar (√ò 8,6 –º–º, —Å—Ç–µ–Ω–∫–∞ 2,3 –º–º) ‚Äî –∫–æ–¥ 100-002.")

    # 8) –ö—Ç–æ —Ç—ã?
    if RE_IDENTITY.search(q):
        return (f"–Ø –±–æ—Ç –ò–≤–∞–Ω—ã—á, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç {COMPANY_NAME}! "
                f"–•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∂–∏–≤—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º? –ü–∏—à–∏/–∑–≤–æ–Ω–∏ –î–º–∏—Ç—Ä–∏—é ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ. "
                f"–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞ –ø–æ—á—Ç—É: {CONTACT_EMAIL}.")

    # 10) –ö—É–ø–∏—Ç—å/–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    if RE_BUY.search(q):
        return (f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ—á—Ç—É {CONTACT_EMAIL}. –ú—ã –≤—ã—Å—Ç–∞–≤–∏–º —Å—á—ë—Ç, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–≥—Ä—É–∑–∏–º. "
                "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏ –∏–ª–∏ –°–î–≠–ö.")

    return None

def make_gpt_reply(user_input: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –≤ OpenAI (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–ª—é—á). –ò–Ω–∞—á–µ ‚Äî –∑–∞–≥–ª—É—à–∫–∞."""
    if not _openai_available:
        return "–ú—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –ø–æ —Å–º–∞–∑–æ—á–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        return "–ù–µ –∑–∞–¥–∞–Ω API‚Äë–∫–ª—é—á. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É ‚Äî –ø–æ–º–æ–∂–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ."

    client = OpenAI(api_key=api_key)
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",  # –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            temperature=0.3,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user",   "content": user_input},
            ],
        )
        text = resp.choices[0].message.content.strip()
        return enforce_company_voice(text)
    except Exception as e:
        # –Ω–µ —Ä–æ–Ω—è–µ–º —Å–µ—Ä–≤–∏—Å
        return f"–ú—ã –Ω–∞ —Å–≤—è–∑–∏. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ {CONTACT_EMAIL} ‚Äî –æ—Ç–≤–µ—Ç–∏–º –±—ã—Å—Ç—Ä–æ. (–¢–µ—Ö.–∑–∞–º–µ—Ç–∫–∞: {e})"

@app.route("/chat", methods=["POST"])
def chat():
    payload = request.get_json(silent=True) or {}
    user_input = (payload.get("message") or "").strip()
    if not user_input:
        return jsonify({"reply": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å."})

    # 0) –§–∏–∫—Å-–æ—Ç–≤–µ—Ç—ã (FAQ/–ø—Ä–∞–≤–∏–ª–∞)
    hard = maybe_hard_reply(user_input)
    if hard:
        return jsonify({"reply": hard})

    # 1) –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤–∏–¥–∞ 100-123 –∏ —Ç.–ø.
    code_match = ARTICLE_CODE.search(user_input)
    if code_match:
        # –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —à–∞–±–ª–æ–Ω –∫–æ–¥–∞, –∏—â–µ–º —Å—Ä–µ–¥–∏ –∑–∞–ø–∏—Å–µ–π
        cand = find_by_article(code_match.group(0))
        if cand:
            return jsonify({"reply": article_reply(cand)})

    # 2) –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ (–µ—Å–ª–∏ –≤–≤–µ–ª–∏ –∫–æ–¥/–Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —à–∞–±–ª–æ–Ω–∞)
    cand = find_by_article(user_input)
    if cand:
        return jsonify({"reply": article_reply(cand)})

    # 3) GPT-–æ—Ç–≤–µ—Ç —Å –∂—ë—Å—Ç–∫–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –≥–æ–ª–æ—Å–∞
    reply = make_gpt_reply(user_input)
    reply = enforce_company_voice(reply)
    return jsonify({"reply": reply})

# ===== entrypoints =====
if __name__ == "__main__":
    load_data()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
else:
    load_data()
