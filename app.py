import os
import re
import json
from typing import List, Dict, Any, Optional

from flask import Flask, request, jsonify
from flask_cors import CORS

# ====== OpenAI (–Ω–æ–≤—ã–π SDK) ======
# –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY
try:
    from openai import OpenAI
    _client: Optional[OpenAI] = OpenAI()  # –≤–æ–∑—å–º—ë—Ç –∫–ª—é—á –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
except Exception:
    _client = None


app = Flask(__name__)
CORS(app)


# ====== –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã (1.json) ======
DATA: List[Dict[str, Any]] = []


def load_data():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å 1.json –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π."""
    global DATA
    DATA = []
    try:
        path = os.path.join(os.path.dirname(__file__), "1.json")
        with open(path, "r", encoding="utf-8") as f:
            raw = json.load(f)

        if isinstance(raw, list):
            DATA = raw
        elif isinstance(raw, dict):
            # –µ—Å–ª–∏ –∫–æ—Ä–µ–Ω—å ‚Äî —Å–ª–æ–≤–∞—Ä—å, —Å–æ–±–µ—Ä—ë–º –≤—Å–µ —Å–ø–∏—Å–∫–∏/–∑–∞–ø–∏—Å–∏ –∏–∑ values
            flat: List[Dict[str, Any]] = []
            for v in raw.values():
                if isinstance(v, list):
                    flat.extend(v)
                elif isinstance(v, dict):
                    flat.append(v)
            DATA = flat if flat else [raw]
        else:
            DATA = []
    except Exception as e:
        app.logger.error(f"[load_data] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 1.json: {e}")
        DATA = []


# ====== –£—Ç–∏–ª–∏—Ç—ã ======
ARTICLE_RE = re.compile(r"^(100|104|106|108|250)-\d{3}$", re.IGNORECASE)

def norm(s: Any) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –¥–µ—Ñ–∏—Å—ã, lower()."""
    if not isinstance(s, str):
        s = str(s)
    s = s.strip()
    s = s.replace("‚Äî", "-").replace("‚Äì", "-").replace("‚Äë", "-")
    s = re.sub(r"\s+", "", s)
    return s.lower()

def record_text(rec: Dict[str, Any]) -> str:
    """–°–∫–ª–µ–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    parts: List[str] = []
    def collect(v):
        if isinstance(v, dict):
            for vv in v.values():
                collect(vv)
        elif isinstance(v, list):
            for vv in v:
                collect(vv)
        else:
            parts.append(str(v))
    collect(rec)
    return " | ".join(parts)

def find_by_article(code_or_text: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –≤ DATA:
    - —Å–Ω–∞—á–∞–ª–∞ –ø–æ "—Ç–∏–ø–∏—á–Ω—ã–º" –∫–ª—é—á–∞–º –∞—Ä—Ç–∏–∫—É–ª–∞: article, art, sku, –∫–æ–¥, –∞—Ä—Ç–∏–∫—É–ª
    - –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤ —Å–∫–ª–µ–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∏
    """
    q = norm(code_or_text)
    if not q:
        return None

    candidate_keys = {"article", "art", "sku", "–∫–æ–¥", "–∞—Ä—Ç–∏–∫—É–ª", "code"}
    for rec in DATA:
        for k, v in rec.items():
            if k.lower() in candidate_keys and norm(v) == q:
                return rec

    for rec in DATA:
        if q in norm(record_text(rec)):
            return rec

    return None


# ====== Health ======
@app.route("/health", methods=["GET"])
def health():
    has_key = bool(os.getenv("OPENAI_API_KEY"))
    return jsonify({"ok": True, "records": len(DATA), "openai_key": has_key})


# ====== –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç ======
@app.route("/chat", methods=["POST"])
def chat():
    try:
        payload = request.get_json(silent=True) or {}
        user_message = (payload.get("message") or "").strip()
        if not user_message:
            return jsonify({"reply": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å."})

        q = user_message.lower()
        app.logger.info(f"[CHAT] input='{user_message}' norm='{norm(user_message)}'")

        # ---------- –ë–´–°–¢–†–´–ï –ì–û–¢–û–í–´–ï –û–¢–í–ï–¢–´ (1‚Äì9) ----------
        # 1) –¥–æ—Å—Ç–∞–≤–∫–∞ / –æ—Ç–≥—Ä—É–∑–∫–∞
        if re.search(r"\b(–¥–æ—Å—Ç–∞–≤–∫\w*|–æ—Ç–ø—Ä–∞–≤\w*|–æ—Ç–≥—Ä—É–∑\w*|–≥—Ä—É–∑–∏—Ç–µ)\b", q, re.IGNORECASE):
            return jsonify({
                "reply": "–î–æ—Å—Ç–∞–≤–∫–∞ –¢–ö –î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏: –¥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ –≥–æ—Ä–æ–¥–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ –∑–∞ –≤–∞—à —Å—á—ë—Ç. –ò–ª–∏ –°–î–≠–ö."
            })

        # 2) –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏
        if re.search(r"\b(–µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏|–≤ –Ω–∞–ª–∏—á–∏–∏)\b", q, re.IGNORECASE):
            return jsonify({
                "reply": "–î–∞, –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏, —Ö–æ—Ç–∏—Ç–µ —Å—á–µ—Ç? –ï—Å–ª–∏ –î–ê ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∏ –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ –≤–º–µ—Å—Ç–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, –ø–æ—á—Ç–∞: info@salpi.ru. –ï—Å–ª–∏ –ù–ï–¢ ‚Äî –Ω–∞–ø—Ä–∞—Å–Ω–æ, –∫–æ–ª–ª–µ–≥–∞)"
            })

        # 3) –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if re.search(r"\b(–º–∏–Ω–∏–º–∞–ª—å–Ω\w* –∫–æ–ª–∏—á–µ—Å—Ç–≤\w*)\b", q, re.IGNORECASE):
            return jsonify({"reply": "–í –æ—Å–Ω–æ–≤–Ω–æ–º –∫—Ä–∞—Ç–Ω–æ 10 —à—Ç."})

        # 4) —Å–∫–∏–¥–∫–∞ / –¥–∏—Å–∫–æ–Ω—Ç
        if re.search(r"\b(—Å–∫–∏–¥–∫\w*|–¥–∏—Å–∫–æ–Ω—Ç)\b", q, re.IGNORECASE):
            return jsonify({"reply": "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –≤–∞–º —Å–∫–æ–ª—å–∫–æ?"})

        # 5) –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ / —Å—Ç—Ä–∞–Ω–∞
        if re.search(r"\b(–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤\w*|—Å—Ç—Ä–∞–Ω–∞)\b", q, re.IGNORECASE):
            return jsonify({"reply": "–ß–µ—Ö–∏—è, –ì–µ—Ä–º–∞–Ω–∏—è."})

        # 6) –ö–∏—Ç–∞–π
        if re.search(r"\b(–∫–∏—Ç–∞–π)\b", q, re.IGNORECASE):
            return jsonify({"reply": "–ù–µ—Ç."})

        # 7) —Ç—Ä—É–±–∫–∞ / —à–ª–∞–Ω–≥ / –†–í–î
        if re.search(r"\b(—Ç—Ä—É–±–∫\w*|—à–ª–∞–Ω–≥|—Ä–≤–¥)\b", q, re.IGNORECASE):
            return jsonify({
                "reply": "–£ –Ω–∞—Å –µ—Å—Ç—å —Ç—Ä—É–±–∫–∞ 6—Ö1,5 –º–º –∫–æ–¥ 100-003-25, –µ—Å—Ç—å —à–ª–∞–Ω–≥ –≤—ã—Å–æ–∫–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è –¥–æ 800 bar, –Ω–∞—Ä—É–∂–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä 8,6 –º–º, —Å—Ç–µ–Ω–∫–∞ 2,3 –º–º, –∫–æ–¥ 100-002."
            })

        # 8) —Ç—ã —á–µ–ª–æ–≤–µ–∫ / –∂–∏–≤–æ–π / —Ç—ã –∫—Ç–æ
        if re.search(r"\b(—Ç—ã —á–µ–ª–æ–≤–µ–∫|–∂–∏–≤–æ–π|—Ç—ã –∫—Ç–æ)\b", q, re.IGNORECASE):
            return jsonify({
                "reply": "–Ø –±–æ—Ç –ò–≤–∞–Ω—ã—á! –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –Ω–∞—Å—Ç–æ—è—â–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º? –¢–æ–≥–¥–∞ —Ç–µ–±–µ –∫ –î–º–∏—Ç—Ä–∏—é! –ó–≤–æ–Ω–∏/–ø–∏—à–∏ –µ–º—É, –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ."
            })

        # 9) –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
        if re.search(r"\b(–¥—É—Ä–∞–∫|–∏–¥–∏–æ—Ç|—Ç—É–ø–æ–π|–ø—Ä–∏–¥—É—Ä–æ–∫|–æ—Å—ë–ª|–æ—Å–µ–ª|–∫–æ–∑–µ–ª|–∫–æ–∑—ë–ª|—É—Ä–æ–¥)\b", q, re.IGNORECASE):
            return jsonify({"reply": "–•–º... —Å–∞–º —Ç–∞–∫–æ–π üòè"})

        # ---------- –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ ----------
        # –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å –∫–æ–¥ –≤–∏–¥–∞ 100-*** / 104-*** / 106-*** / 108-*** / 250-***
        m = re.search(r"(100|104|106|108|250)-\d{3}", q, re.IGNORECASE)
        rec = None
        if m:
            rec = find_by_article(m.group(0))

        if not rec:
            # –µ—Å–ª–∏ –∫–æ–¥–∞ –Ω–µ –±—ã–ª–æ –∏–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–º –ø–æ–∏—Å–∫–æ–º –ø–æ –ø–æ–ª—è–º
            rec = find_by_article(user_message)

        if rec:
            # –∫—Ä–∞—Å–∏–≤–æ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
            name = rec.get("name") or rec.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") or rec.get("title")
            article = rec.get("article") or rec.get("–∞—Ä—Ç–∏–∫—É–ª") or rec.get("sku") or rec.get("code")
            price = rec.get("price") or rec.get("—Ü–µ–Ω–∞")
            parts = []
            if name:    parts.append(f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {name}")
            if article: parts.append(f"–ê—Ä—Ç–∏–∫—É–ª: {article}")
            if price:   parts.append(f"–¶–µ–Ω–∞: {price}")
            reply = "\n".join(parts) if parts else json.dumps(rec, ensure_ascii=False)
            return jsonify({"reply": reply})

        # ---------- GPT‚Äë—Ñ–æ–ª–±—ç–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á) ----------
        if not _client or not os.getenv("OPENAI_API_KEY"):
            # –ö–ª—é—á–∞ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –±–µ–∑ GPT
            return jsonify({
                "reply": "–ü–æ —Ç–µ–º–µ —Å–º–∞–∑–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∂—É: –∑–∞–¥–∞–π—Ç–µ –∞—Ä—Ç–∏–∫—É–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 106-003) –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."
            })

        system_prompt = (
            "–¢—ã ‚Äî –ò–≤–∞–Ω—ã—á, —ç–∫—Å–ø–µ—Ä—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Å–º–∞–∑–æ—á–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é. "
            "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ —Å–º–∞–∑–æ—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è. "
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –æ—Ç–≤–µ—á–∞–π: '–Ø –º–æ–≥—É –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ —Å–º–∞–∑–æ—á–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é.' "
            "–ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –Ω–∞–ª–∏—á–∏–µ ‚Äî –≥–æ–≤–æ—Ä–∏: '–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–∞–ª–∏—á–∏–∏ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞–º –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ'."
        )

        completion = _client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=350,
        )
        reply_text = completion.choices[0].message.content.strip()
        return jsonify({"reply": reply_text})

    except Exception as e:
        app.logger.exception("chat error")
        return jsonify({"reply": f"–û—à–∏–±–∫–∞: {e}"}), 500


# ====== –°—Ç–∞—Ä—Ç ======
if __name__ == "__main__":
    load_data()
    app.run(host="0.0.0.0", port=5000, debug=True)
else:
    load_data()
